[
  InstType { mnemonic: "nop", get: &GetterOp00 {}, syntax: "" },
  InstType { mnemonic: "move", get: &GetterOpBA {}, syntax: "vA, vB" },
  InstType { mnemonic: "move/from16", get: &GetterOpAABBBB {}, syntax: "vA, vB" },
  InstType { mnemonic: "move/16", get: &GetterOp00AAAABBBB {}, syntax: "vA, vB" },
  InstType { mnemonic: "move-wide", get: &GetterOpBA {}, syntax: "vA, vB" },
  InstType { mnemonic: "move-wide/from16", get: &GetterOpAABBBB {}, syntax: "vA, vB" },
  InstType { mnemonic: "move-wide/16", get: &GetterOp00AAAABBBB {}, syntax: "vA, vB" },
  InstType { mnemonic: "move-object", get: &GetterOpBA {}, syntax: "vA, vB" },
  InstType { mnemonic: "move-object/from16", get: &GetterOpAABBBB {}, syntax: "vA, vB" },
  InstType { mnemonic: "move-object/16", get: &GetterOp00AAAABBBB {}, syntax: "vA, vB" },
  InstType { mnemonic: "move-result", get: &GetterOpAA {}, syntax: "vA" },
  InstType { mnemonic: "move-result-wide", get: &GetterOpAA {}, syntax: "vA" },
  InstType { mnemonic: "move-result-object", get: &GetterOpAA {}, syntax: "vA" },
  InstType { mnemonic: "move-exception", get: &GetterOpAA {}, syntax: "vA" },
  InstType { mnemonic: "return-void", get: &GetterOp00 {}, syntax: "" },
  InstType { mnemonic: "return", get: &GetterOpAA {}, syntax: "vA" },
  InstType { mnemonic: "return-wide", get: &GetterOpAA {}, syntax: "VA" },
  InstType { mnemonic: "return-object", get: &GetterOpAA {}, syntax: "vA" },
  InstType { mnemonic: "const/4", get: &GetterOpBA {}, syntax: "vA, #+B" },
  InstType { mnemonic: "const/16", get: &GetterOpAABBBB {}, syntax: "vA, #+B" },
  InstType { mnemonic: "const", get: &GetterOpAABBBBBBBB {}, syntax: "vA, #+B" },
  InstType { mnemonic: "const/high16", get: &GetterOpAABBBB {}, syntax: "vA, #+B0000" },
  InstType { mnemonic: "const-wide/16", get: &GetterOpAABBBB {}, syntax: "vA, #+B" },
  InstType { mnemonic: "const-wide/32", get: &GetterOpAABBBBBBBB {}, syntax: "vA, #+B" },
  InstType { mnemonic: "const-wide", get: &GetterOpAABBBBBBBBBBBBBBBB {}, syntax: "vA, #+B" },
  InstType { mnemonic: "const-wide/high16", get: &GetterOpAABBBB {}, syntax: "vA, #+B000000000000" },
  InstType { mnemonic: "const-string", get: &GetterOpAABBBB {}, syntax: "vA, string@B" },
  InstType { mnemonic: "const-string/jumbo", get: &GetterOpAABBBBBBBB {}, syntax: "vA, string@B" },
  InstType { mnemonic: "const-class", get: &GetterOpAABBBB {}, syntax: "vA, type@B" },
  InstType { mnemonic: "monitor-enter", get: &GetterOpAA {}, syntax: "vA" },
  InstType { mnemonic: "monitor-exit", get: &GetterOpAA {}, syntax: "vA" },
  InstType { mnemonic: "check-cast", get: &GetterOpAABBBB {}, syntax: "vA, type@B" },
  InstType { mnemonic: "instance-of", get: &GetterOpBACCCC {}, syntax: "vA, vB, type@C" },
  InstType { mnemonic: "array-length", get: &GetterOpBA {}, syntax: "vA, vB" },
  InstType { mnemonic: "new-instance", get: &GetterOpAABBBB {}, syntax: "vA, type@B" },
  InstType { mnemonic: "new-array", get: &GetterOpBACCCC {}, syntax: "vA, vB, type@C" },
  InstType { mnemonic: "filled-new-array", get: &GetterOpAGBBBBDCFE {}, syntax: "{vC, vD, vE, vF, vG}, type@B" },
  InstType { mnemonic: "filled-new-array/range", get: &GetterOpAABBBBCCCC {}, syntax: "{vC .. vN}, type@B" },
  InstType { mnemonic: "fill-array-data", get: &GetterOpAABBBBBBBB {}, syntax: "{vA, B}" },
  InstType { mnemonic: "throw", get: &GetterOpAA {}, syntax: "vA" },
  InstType { mnemonic: "goto", get: &Getter10t {}, syntax: "+A" },
  InstType { mnemonic: "goto/16", get: &Getter20t {}, syntax: "+A" },
  InstType { mnemonic: "goto/32", get: &Getter30t {}, syntax: "+A" },
  InstType { mnemonic: "packed-switch", get: &GetterOpAABBBBBBBB {}, syntax: "vA, B" },
  InstType { mnemonic: "sparse-switch", get: &GetterOpAABBBBBBBB {}, syntax: "vA, B" },
  InstType { mnemonic: "cmpl-float", get: &GetterOpAACCBB {}, syntax: "vA, vB, vC" },
  InstType { mnemonic: "cmpg-float", get: &GetterOpAACCBB {}, syntax: "vA, vB, vC" },
  InstType { mnemonic: "cmpl-double", get: &GetterOpAACCBB {}, syntax: "vA, vB, vC" },
  InstType { mnemonic: "cmpg-double", get: &GetterOpAACCBB {}, syntax: "vA, vB, vC" },
  InstType { mnemonic: "cmp-long", get: &GetterOpAACCBB {}, syntax: "vA, vB, vC" },
  InstType { mnemonic: "if-eq", get: &Getter22t {}, syntax: "vA, vB, C" },
  InstType { mnemonic: "if-ne", get: &Getter22t {}, syntax: "vA, vB, C" },
  InstType { mnemonic: "if-lt", get: &Getter22t {}, syntax: "vA, vB, C" },
  InstType { mnemonic: "if-ge", get: &Getter22t {}, syntax: "vA, vB, C" },
  InstType { mnemonic: "if-gt", get: &Getter22t {}, syntax: "vA, vB, C" },
  InstType { mnemonic: "if-le", get: &Getter22t {}, syntax: "vA, vB, C" },
  InstType { mnemonic: "if-eqz", get: &Getter21t {}, syntax: "vA, B" },
  InstType { mnemonic: "if-nez", get: &Getter21t {}, syntax: "vA, B" },
  InstType { mnemonic: "if-ltz", get: &Getter21t {}, syntax: "vA, B" },
  InstType { mnemonic: "if-gez", get: &Getter21t {}, syntax: "vA, B" },
  InstType { mnemonic: "if-gtz", get: &Getter21t {}, syntax: "vA, B" },
  InstType { mnemonic: "if-lez", get: &Getter21t {}, syntax: "vA, B" },
  InstType { mnemonic: "UNUSED", get: &GetterOp00 {}, syntax: "" },
  InstType { mnemonic: "UNUSED", get: &GetterOp00 {}, syntax: "" },
  InstType { mnemonic: "UNUSED", get: &GetterOp00 {}, syntax: "" },
  InstType { mnemonic: "UNUSED", get: &GetterOp00 {}, syntax: "" },
  InstType { mnemonic: "UNUSED", get: &GetterOp00 {}, syntax: "" },
  InstType { mnemonic: "UNUSED", get: &GetterOp00 {}, syntax: "" },
  InstType { mnemonic: "aget", get: &GetterOpAACCBB {}, syntax: "vA, vB, vC" },
  InstType { mnemonic: "aget-wide", get: &GetterOpAACCBB {}, syntax: "vA, vB, vC" },
  InstType { mnemonic: "aget-object", get: &GetterOpAACCBB {}, syntax: "vA, vB, vC" },
  InstType { mnemonic: "aget-boolean", get: &GetterOpAACCBB {}, syntax: "vA, vB, vC" },
  InstType { mnemonic: "aget-byte", get: &GetterOpAACCBB {}, syntax: "vA, vB, vC" },
  InstType { mnemonic: "aget-char", get: &GetterOpAACCBB {}, syntax: "vA, vB, vC" },
  InstType { mnemonic: "aget-short", get: &GetterOpAACCBB {}, syntax: "vA, vB, vC" },
  InstType { mnemonic: "aput", get: &GetterOpAACCBB {}, syntax: "vA, vB, vC" },
  InstType { mnemonic: "aput-wide", get: &GetterOpAACCBB {}, syntax: "vA, vB, vC" },
  InstType { mnemonic: "aput-object", get: &GetterOpAACCBB {}, syntax: "vA, vB, vC" },
  InstType { mnemonic: "aput-boolean", get: &GetterOpAACCBB {}, syntax: "vA, vB, vC" },
  InstType { mnemonic: "aput-byte", get: &GetterOpAACCBB {}, syntax: "vA, vB, vC" },
  InstType { mnemonic: "aput-char", get: &GetterOpAACCBB {}, syntax: "vA, vB, vC" },
  InstType { mnemonic: "aput-short", get: &GetterOpAACCBB {}, syntax: "vA, vB, vC" },
  InstType { mnemonic: "iget", get: &GetterOpBACCCC {}, syntax: "vA, vB, field@C" },
  InstType { mnemonic: "iget-wide", get: &GetterOpBACCCC {}, syntax: "vA, vB, field@C" },
  InstType { mnemonic: "iget-object", get: &GetterOpBACCCC {}, syntax: "vA, vB, field@C" },
  InstType { mnemonic: "iget-boolean", get: &GetterOpBACCCC {}, syntax: "vA, vB, field@C" },
  InstType { mnemonic: "iget-byte", get: &GetterOpBACCCC {}, syntax: "vA, vB, field@C" },
  InstType { mnemonic: "iget-char", get: &GetterOpBACCCC {}, syntax: "vA, vB, field@C" },
  InstType { mnemonic: "iget-short", get: &GetterOpBACCCC {}, syntax: "vA, vB, field@C" },
  InstType { mnemonic: "iput", get: &GetterOpBACCCC {}, syntax: "vA, vB, field@C" },
  InstType { mnemonic: "iput-wide", get: &GetterOpBACCCC {}, syntax: "vA, vB, field@C" },
  InstType { mnemonic: "iput-object", get: &GetterOpBACCCC {}, syntax: "vA, vB, field@C" },
  InstType { mnemonic: "iput-boolean", get: &GetterOpBACCCC {}, syntax: "vA, vB, field@C" },
  InstType { mnemonic: "iput-byte", get: &GetterOpBACCCC {}, syntax: "vA, vB, field@C" },
  InstType { mnemonic: "iput-char", get: &GetterOpBACCCC {}, syntax: "vA, vB, field@C" },
  InstType { mnemonic: "iput-short", get: &GetterOpBACCCC {}, syntax: "vA, vB, field@C" },
  InstType { mnemonic: "sget", get: &GetterOpAABBBB {}, syntax: "vA, field@B" },
  InstType { mnemonic: "sget-wide", get: &GetterOpAABBBB {}, syntax: "vA, field@B" },
  InstType { mnemonic: "sget-object", get: &GetterOpAABBBB {}, syntax: "vA, field@B" },
  InstType { mnemonic: "sget-boolean", get: &GetterOpAABBBB {}, syntax: "vA, field@B" },
  InstType { mnemonic: "sget-byte", get: &GetterOpAABBBB {}, syntax: "vA, field@B" },
  InstType { mnemonic: "sget-char", get: &GetterOpAABBBB {}, syntax: "vA, field@B" },
  InstType { mnemonic: "sget-short", get: &GetterOpAABBBB {}, syntax: "vA, field@B" },
  InstType { mnemonic: "sput", get: &GetterOpAABBBB {}, syntax: "vA, field@B" },
  InstType { mnemonic: "sput-wide", get: &GetterOpAABBBB {}, syntax: "vA, field@B" },
  InstType { mnemonic: "sput-object", get: &GetterOpAABBBB {}, syntax: "vA, field@B" },
  InstType { mnemonic: "sput-boolean", get: &GetterOpAABBBB {}, syntax: "vA, field@B" },
  InstType { mnemonic: "sput-byte", get: &GetterOpAABBBB {}, syntax: "vA, field@B" },
  InstType { mnemonic: "sput-char", get: &GetterOpAABBBB {}, syntax: "vA, field@B" },
  InstType { mnemonic: "sput-short", get: &GetterOpAABBBB {}, syntax: "vA, field@B" },
  InstType { mnemonic: "invoke-virtual", get: &GetterOpAGBBBBDCFE {}, syntax: "{vC vD, vE, vF, vG}, meth@B" },
  InstType { mnemonic: "invoke-super", get: &GetterOpAGBBBBDCFE {}, syntax: "{vC vD, vE, vF, vG}, meth@B" },
  InstType { mnemonic: "invoke-direct", get: &GetterOpAGBBBBDCFE {}, syntax: "{vC vD, vE, vF, vG}, meth@B" },
  InstType { mnemonic: "invoke-static", get: &GetterOpAGBBBBDCFE {}, syntax: "{vC vD, vE, vF, vG}, meth@B" },
  InstType { mnemonic: "invoke-interface", get: &GetterOpAGBBBBDCFE {}, syntax: "{vC vD, vE, vF, vG}, meth@B" },
  InstType { mnemonic: "UNUSED", get: &GetterOp00 {}, syntax: "" },
  InstType { mnemonic: "invoke-virtual/range", get: &GetterOpAABBBBCCCC {}, syntax: "{vC .. vN}, meth@B" },
  InstType { mnemonic: "invoke-super/range", get: &GetterOpAABBBBCCCC {}, syntax: "{vC .. vN}, meth@B" },
  InstType { mnemonic: "invoke-direct/range", get: &GetterOpAABBBBCCCC {}, syntax: "{vC .. vN}, meth@B" },
  InstType { mnemonic: "invoke-static/range", get: &GetterOpAABBBBCCCC {}, syntax: "{vC .. vN}, meth@B" },
  InstType { mnemonic: "invoke-interface/range", get: &GetterOpAABBBBCCCC {}, syntax: "{vC .. vN}, meth@B" },
  InstType { mnemonic: "UNUSED", get: &GetterOp00 {}, syntax: "" },
  InstType { mnemonic: "UNUSED", get: &GetterOp00 {}, syntax: "" },
  InstType { mnemonic: "neg-int", get: &GetterOpBA {}, syntax: "vA, vB" },
  InstType { mnemonic: "not-int", get: &GetterOpBA {}, syntax: "vA, vB" },
  InstType { mnemonic: "neg-long", get: &GetterOpBA {}, syntax: "vA, vB" },
  InstType { mnemonic: "not-long", get: &GetterOpBA {}, syntax: "vA, vB" },
  InstType { mnemonic: "neg-float", get: &GetterOpBA {}, syntax: "vA, vB" },
  InstType { mnemonic: "neg-double", get: &GetterOpBA {}, syntax: "vA, vB" },
  InstType { mnemonic: "int-to-long", get: &GetterOpBA {}, syntax: "vA, vB" },
  InstType { mnemonic: "int-to-float", get: &GetterOpBA {}, syntax: "vA, vB" },
  InstType { mnemonic: "int-to-double", get: &GetterOpBA {}, syntax: "vA, vB" },
  InstType { mnemonic: "long-to-int", get: &GetterOpBA {}, syntax: "vA, vB" },
  InstType { mnemonic: "long-to-float", get: &GetterOpBA {}, syntax: "vA, vB" },
  InstType { mnemonic: "long-to-double", get: &GetterOpBA {}, syntax: "vA, vB" },
  InstType { mnemonic: "float-to-int", get: &GetterOpBA {}, syntax: "vA, vB" },
  InstType { mnemonic: "float-to-long", get: &GetterOpBA {}, syntax: "vA, vB" },
  InstType { mnemonic: "float-to-double", get: &GetterOpBA {}, syntax: "vA, vB" },
  InstType { mnemonic: "double-to-int", get: &GetterOpBA {}, syntax: "vA, vB" },
  InstType { mnemonic: "double-to-long", get: &GetterOpBA {}, syntax: "vA, vB" },
  InstType { mnemonic: "double-to-float", get: &GetterOpBA {}, syntax: "vA, vB" },
  InstType { mnemonic: "int-to-byte", get: &GetterOpBA {}, syntax: "vA, vB" },
  InstType { mnemonic: "int-to-char", get: &GetterOpBA {}, syntax: "vA, vB" },
  InstType { mnemonic: "int-to-short", get: &GetterOpBA {}, syntax: "vA, vB" },
  InstType { mnemonic: "add-int", get: &GetterOpAACCBB {}, syntax: "vA, vB, vC" },
  InstType { mnemonic: "sub-int", get: &GetterOpAACCBB {}, syntax: "vA, vB, vC" },
  InstType { mnemonic: "mul-int", get: &GetterOpAACCBB {}, syntax: "vA, vB, vC" },
  InstType { mnemonic: "div-int", get: &GetterOpAACCBB {}, syntax: "vA, vB, vC" },
  InstType { mnemonic: "rem-int", get: &GetterOpAACCBB {}, syntax: "vA, vB, vC" },
  InstType { mnemonic: "and-int", get: &GetterOpAACCBB {}, syntax: "vA, vB, vC" },
  InstType { mnemonic: "or-int", get: &GetterOpAACCBB {}, syntax: "vA, vB, vC" },
  InstType { mnemonic: "xor-int", get: &GetterOpAACCBB {}, syntax: "vA, vB, vC" },
  InstType { mnemonic: "shl-int", get: &GetterOpAACCBB {}, syntax: "vA, vB, vC" },
  InstType { mnemonic: "shr-int", get: &GetterOpAACCBB {}, syntax: "vA, vB, vC" },
  InstType { mnemonic: "ushr-int", get: &GetterOpAACCBB {}, syntax: "vA, vB, vC" },
  InstType { mnemonic: "add-long", get: &GetterOpAACCBB {}, syntax: "vA, vB, vC" },
  InstType { mnemonic: "sub-long", get: &GetterOpAACCBB {}, syntax: "vA, vB, vC" },
  InstType { mnemonic: "mul-long", get: &GetterOpAACCBB {}, syntax: "vA, vB, vC" },
  InstType { mnemonic: "div-long", get: &GetterOpAACCBB {}, syntax: "vA, vB, vC" },
  InstType { mnemonic: "rem-long", get: &GetterOpAACCBB {}, syntax: "vA, vB, vC" },
  InstType { mnemonic: "and-long", get: &GetterOpAACCBB {}, syntax: "vA, vB, vC" },
  InstType { mnemonic: "or-long", get: &GetterOpAACCBB {}, syntax: "vA, vB, vC" },
  InstType { mnemonic: "xor-long", get: &GetterOpAACCBB {}, syntax: "vA, vB, vC" },
  InstType { mnemonic: "shl-long", get: &GetterOpAACCBB {}, syntax: "vA, vB, vC" },
  InstType { mnemonic: "shr-long", get: &GetterOpAACCBB {}, syntax: "vA, vB, vC" },
  InstType { mnemonic: "ushr-long", get: &GetterOpAACCBB {}, syntax: "vA, vB, vC" },
  InstType { mnemonic: "add-float", get: &GetterOpAACCBB {}, syntax: "vA, vB, vC" },
  InstType { mnemonic: "sub-float", get: &GetterOpAACCBB {}, syntax: "vA, vB, vC" },
  InstType { mnemonic: "mul-float", get: &GetterOpAACCBB {}, syntax: "vA, vB, vC" },
  InstType { mnemonic: "div-float", get: &GetterOpAACCBB {}, syntax: "vA, vB, vC" },
  InstType { mnemonic: "rem-float", get: &GetterOpAACCBB {}, syntax: "vA, vB, vC" },
  InstType { mnemonic: "add-double", get: &GetterOpAACCBB {}, syntax: "vA, vB, vC" },
  InstType { mnemonic: "sub-double", get: &GetterOpAACCBB {}, syntax: "vA, vB, vC" },
  InstType { mnemonic: "mul-double", get: &GetterOpAACCBB {}, syntax: "vA, vB, vC" },
  InstType { mnemonic: "div-double", get: &GetterOpAACCBB {}, syntax: "vA, vB, vC" },
  InstType { mnemonic: "rem-double", get: &GetterOpAACCBB {}, syntax: "vA, vB, vC" },
  InstType { mnemonic: "add-int/2addr", get: &GetterOpBA {}, syntax: "vA, vB" },
  InstType { mnemonic: "sub-int/2addr", get: &GetterOpBA {}, syntax: "vA, vB" },
  InstType { mnemonic: "mul-int/2addr", get: &GetterOpBA {}, syntax: "vA, vB" },
  InstType { mnemonic: "div-int/2addr", get: &GetterOpBA {}, syntax: "vA, vB" },
  InstType { mnemonic: "rem-int/2addr", get: &GetterOpBA {}, syntax: "vA, vB" },
  InstType { mnemonic: "and-int/2addr", get: &GetterOpBA {}, syntax: "vA, vB" },
  InstType { mnemonic: "or-int/2addr", get: &GetterOpBA {}, syntax: "vA, vB" },
  InstType { mnemonic: "xor-int/2addr", get: &GetterOpBA {}, syntax: "vA, vB" },
  InstType { mnemonic: "shl-int/2addr", get: &GetterOpBA {}, syntax: "vA, vB" },
  InstType { mnemonic: "shr-int/2addr", get: &GetterOpBA {}, syntax: "vA, vB" },
  InstType { mnemonic: "ushr-int/2addr", get: &GetterOpBA {}, syntax: "vA, vB" },
  InstType { mnemonic: "add-long/2addr", get: &GetterOpBA {}, syntax: "vA, vB" },
  InstType { mnemonic: "sub-long/2addr", get: &GetterOpBA {}, syntax: "vA, vB" },
  InstType { mnemonic: "mul-long/2addr", get: &GetterOpBA {}, syntax: "vA, vB" },
  InstType { mnemonic: "div-long/2addr", get: &GetterOpBA {}, syntax: "vA, vB" },
  InstType { mnemonic: "rem-long/2addr", get: &GetterOpBA {}, syntax: "vA, vB" },
  InstType { mnemonic: "and-long/2addr", get: &GetterOpBA {}, syntax: "vA, vB" },
  InstType { mnemonic: "or-long/2addr", get: &GetterOpBA {}, syntax: "vA, vB" },
  InstType { mnemonic: "xor-long/2addr", get: &GetterOpBA {}, syntax: "vA, vB" },
  InstType { mnemonic: "shl-long/2addr", get: &GetterOpBA {}, syntax: "vA, vB" },
  InstType { mnemonic: "shr-long/2addr", get: &GetterOpBA {}, syntax: "vA, vB" },
  InstType { mnemonic: "ushr-long/2addr", get: &GetterOpBA {}, syntax: "vA, vB" },
  InstType { mnemonic: "add-float/2addr", get: &GetterOpBA {}, syntax: "vA, vB" },
  InstType { mnemonic: "sub-float/2addr", get: &GetterOpBA {}, syntax: "vA, vB" },
  InstType { mnemonic: "mul-float/2addr", get: &GetterOpBA {}, syntax: "vA, vB" },
  InstType { mnemonic: "div-float/2addr", get: &GetterOpBA {}, syntax: "vA, vB" },
  InstType { mnemonic: "rem-float/2addr", get: &GetterOpBA {}, syntax: "vA, vB" },
  InstType { mnemonic: "add-double/2addr", get: &GetterOpBA {}, syntax: "vA, vB" },
  InstType { mnemonic: "sub-double/2addr", get: &GetterOpBA {}, syntax: "vA, vB" },
  InstType { mnemonic: "mul-double/2addr", get: &GetterOpBA {}, syntax: "vA, vB" },
  InstType { mnemonic: "div-double/2addr", get: &GetterOpBA {}, syntax: "vA, vB" },
  InstType { mnemonic: "rem-double/2addr", get: &GetterOpBA {}, syntax: "vA, vB" },
  InstType { mnemonic: "add-int/lit16", get: &GetterOpBACCCC {}, syntax: "vA, vB, #+C" },
  InstType { mnemonic: "rsub-int", get: &GetterOpBACCCC {}, syntax: "vA, vB, #+C" },
  InstType { mnemonic: "mul-int/lit16", get: &GetterOpBACCCC {}, syntax: "vA, vB, #+C" },
  InstType { mnemonic: "div-int/lit16", get: &GetterOpBACCCC {}, syntax: "vA, vB, #+C" },
  InstType { mnemonic: "rem-int/lit16", get: &GetterOpBACCCC {}, syntax: "vA, vB, #+C" },
  InstType { mnemonic: "and-int/lit16", get: &GetterOpBACCCC {}, syntax: "vA, vB, #+C" },
  InstType { mnemonic: "or-int/lit16", get: &GetterOpBACCCC {}, syntax: "vA, vB, #+C" },
  InstType { mnemonic: "xor-int/lit16", get: &GetterOpBACCCC {}, syntax: "vA, vB, #+C" },
  InstType { mnemonic: "add-int/lit8", get: &GetterOpAACCBB {}, syntax: "vA, vB, #+C" },
  InstType { mnemonic: "rsub-int/lit8", get: &GetterOpAACCBB {}, syntax: "vA, vB, #+C" },
  InstType { mnemonic: "mul-int/lit8", get: &GetterOpAACCBB {}, syntax: "vA, vB, #+C" },
  InstType { mnemonic: "div-int/lit8", get: &GetterOpAACCBB {}, syntax: "vA, vB, #+C" },
  InstType { mnemonic: "rem-int/lit8", get: &GetterOpAACCBB {}, syntax: "vA, vB, #+C" },
  InstType { mnemonic: "and-int/lit8", get: &GetterOpAACCBB {}, syntax: "vA, vB, #+C" },
  InstType { mnemonic: "or-int/lit8", get: &GetterOpAACCBB {}, syntax: "vA, vB, #+C" },
  InstType { mnemonic: "xor-int/lit8", get: &GetterOpAACCBB {}, syntax: "vA, vB, #+C" },
  InstType { mnemonic: "shl-int/lit8", get: &GetterOpAACCBB {}, syntax: "vA, vB, #+C" },
  InstType { mnemonic: "shr-int/lit8", get: &GetterOpAACCBB {}, syntax: "vA, vB, #+C" },
  InstType { mnemonic: "ushr-int/lit8", get: &GetterOpAACCBB {}, syntax: "vA, vB, #+C" },
  InstType { mnemonic: "UNUSED", get: &GetterOp00 {}, syntax: "" },
  InstType { mnemonic: "UNUSED", get: &GetterOp00 {}, syntax: "" },
  InstType { mnemonic: "UNUSED", get: &GetterOp00 {}, syntax: "" },
  InstType { mnemonic: "UNUSED", get: &GetterOp00 {}, syntax: "" },
  InstType { mnemonic: "UNUSED", get: &GetterOp00 {}, syntax: "" },
  InstType { mnemonic: "UNUSED", get: &GetterOp00 {}, syntax: "" },
  InstType { mnemonic: "UNUSED", get: &GetterOp00 {}, syntax: "" },
  InstType { mnemonic: "UNUSED", get: &GetterOp00 {}, syntax: "" },
  InstType { mnemonic: "UNUSED", get: &GetterOp00 {}, syntax: "" },
  InstType { mnemonic: "UNUSED", get: &GetterOp00 {}, syntax: "" },
  InstType { mnemonic: "UNUSED", get: &GetterOp00 {}, syntax: "" },
  InstType { mnemonic: "UNUSED", get: &GetterOp00 {}, syntax: "" },
  InstType { mnemonic: "UNUSED", get: &GetterOp00 {}, syntax: "" },
  InstType { mnemonic: "UNUSED", get: &GetterOp00 {}, syntax: "" },
  InstType { mnemonic: "UNUSED", get: &GetterOp00 {}, syntax: "" },
  InstType { mnemonic: "UNUSED", get: &GetterOp00 {}, syntax: "" },
  InstType { mnemonic: "UNUSED", get: &GetterOp00 {}, syntax: "" },
  InstType { mnemonic: "UNUSED", get: &GetterOp00 {}, syntax: "" },
  InstType { mnemonic: "UNUSED", get: &GetterOp00 {}, syntax: "" },
  InstType { mnemonic: "UNUSED", get: &GetterOp00 {}, syntax: "" },
  InstType { mnemonic: "UNUSED", get: &GetterOp00 {}, syntax: "" },
  InstType { mnemonic: "UNUSED", get: &GetterOp00 {}, syntax: "" },
  InstType { mnemonic: "UNUSED", get: &GetterOp00 {}, syntax: "" },
  InstType { mnemonic: "invoke-polymorphic", get: &GetterOpAGBBBBDCFEHHHH {}, syntax: "{vC, vD, vE, vF, vG}, meth@B, proto@H" },
  InstType { mnemonic: "invoke-polymorphic/range", get: &GetterOpAABBBBCCCCHHHH {}, syntax: "{vC .. vN}, meth@B, proto@H" },
  InstType { mnemonic: "invoke-custom", get: &GetterOpAGBBBBDCFE {}, syntax: "{vC, vD, vE, vF, vG}, call-site@B" },
  InstType { mnemonic: "invoke-custom/range", get: &GetterOpAABBBBCCCC {}, syntax: "{vC .. vN}, call-site@B" },
  InstType { mnemonic: "const-method-handle", get: &GetterOpAABBBB {}, syntax: "vA, method-handle@B" },
  InstType { mnemonic: "const-method-type", get: &GetterOpAABBBB {}, syntax: "vA, proto@B" },
]
