[
  InstType { mnemonic: "nop", get: &GetterOp00 {}, syntax: "" },
  InstType { mnemonic: "move", get: &GetterOpBA {}, syntax: "vA, vB" },
  InstType { mnemonic: "move/from16", get: &GetterOpAABBBB {}, syntax: "vA, vB" },
  InstType { mnemonic: "move/16", get: &GetterOp00AAAABBBB {}, syntax: "vA, vB" },
  InstType { mnemonic: "move_wide", get: &GetterOpBA {}, syntax: "vA, vB" },
  InstType { mnemonic: "move_wide/from16", get: &GetterOpAABBBB {}, syntax: "vA, vB" },
  InstType { mnemonic: "move_wide/16", get: &GetterOp00AAAABBBB {}, syntax: "vA, vB" },
  InstType { mnemonic: "move_object", get: &GetterOpBA {}, syntax: "vA, vB" },
  InstType { mnemonic: "move_object/from16", get: &GetterOpAABBBB {}, syntax: "vA, vB" },
  InstType { mnemonic: "move_object/16", get: &GetterOp00AAAABBBB {}, syntax: "vA, vB" },
  InstType { mnemonic: "move_result", get: &GetterOpAA {}, syntax: "vA" },
  InstType { mnemonic: "move_result_wide", get: &GetterOpAA {}, syntax: "vA" },
  InstType { mnemonic: "move_result_object", get: &GetterOpAA {}, syntax: "vA" },
  InstType { mnemonic: "move_exception", get: &GetterOpAA {}, syntax: "vA" },
  InstType { mnemonic: "return_void", get: &GetterOp00 {}, syntax: "" },
  InstType { mnemonic: "return", get: &GetterOpAA {}, syntax: "vA" },
  InstType { mnemonic: "return_wide", get: &GetterOpAA {}, syntax: "VA" },
  InstType { mnemonic: "return_object", get: &GetterOpAA {}, syntax: "vA" },
  InstType { mnemonic: "const/4", get: &GetterOpBA {}, syntax: "vA, #+B" },
  InstType { mnemonic: "const/16", get: &GetterOpAABBBB {}, syntax: "vA, #+B" },
  InstType { mnemonic: "const", get: &GetterOpAABBBBBBBB {}, syntax: "vA, #+B" },
  InstType { mnemonic: "const/high16", get: &GetterOpAABBBB {}, syntax: "vA, #+B0000" },
  InstType { mnemonic: "const_wide/16", get: &GetterOpAABBBB {}, syntax: "vA, #+B" },
  InstType { mnemonic: "const_wide/32", get: &GetterOpAABBBBBBBB {}, syntax: "vA, #+B" },
  InstType { mnemonic: "const_wide", get: &GetterOpAABBBBBBBBBBBBBBBB {}, syntax: "vA, #+B" },
  InstType { mnemonic: "const_wide/high16", get: &GetterOpAABBBB {}, syntax: "vA, #+B000000000000" },
  InstType { mnemonic: "const_string", get: &GetterOpAABBBB {}, syntax: "vA, string@B" },
  InstType { mnemonic: "const_string/jumbo", get: &GetterOpAABBBBBBBB {}, syntax: "vA, string@B" },
  InstType { mnemonic: "const_class", get: &GetterOpAABBBB {}, syntax: "vA, type@B" },
  InstType { mnemonic: "monitor_enter", get: &GetterOpAA {}, syntax: "vA" },
  InstType { mnemonic: "monitor_exit", get: &GetterOpAA {}, syntax: "vA" },
  InstType { mnemonic: "check_cast", get: &GetterOpAABBBB {}, syntax: "vA, type@B" },
  InstType { mnemonic: "instance_of", get: &GetterOpBACCCC {}, syntax: "vA, vB, type@C" },
  InstType { mnemonic: "array_length", get: &GetterOpBA {}, syntax: "vA, vB" },
  InstType { mnemonic: "new_instance", get: &GetterOpAABBBB {}, syntax: "vA, type@B" },
  InstType { mnemonic: "new_array", get: &GetterOpBACCCC {}, syntax: "vA, vB, type@C" },
  InstType { mnemonic: "filled_new_array", get: &GetterOpAGBBBBDCFE {}, syntax: "{vC, vD, vE, vF, vG}, type@B" },
  InstType { mnemonic: "filled_new_array/range", get: &GetterOpAABBBBCCCC {}, syntax: "{vC .. vN}, type@B" },
  InstType { mnemonic: "fill_array_data", get: &GetterOpAABBBBBBBB {}, syntax: "{vA, B}" },
  InstType { mnemonic: "throw", get: &GetterOpAA {}, syntax: "vA" },
  InstType { mnemonic: "goto", get: &Getter10t {}, syntax: "+A" },
  InstType { mnemonic: "goto/16", get: &Getter20t {}, syntax: "+A" },
  InstType { mnemonic: "goto/32", get: &Getter30t {}, syntax: "+A" },
  InstType { mnemonic: "packed_switch", get: &GetterOpAABBBBBBBB {}, syntax: "vA, B" },
  InstType { mnemonic: "sparse_switch", get: &GetterOpAABBBBBBBB {}, syntax: "vA, B" },
  InstType { mnemonic: "cmpl_float", get: &GetterOpAACCBB {}, syntax: "vA, vB, vC" },
  InstType { mnemonic: "cmpg_float", get: &GetterOpAACCBB {}, syntax: "vA, vB, vC" },
  InstType { mnemonic: "cmpl_double", get: &GetterOpAACCBB {}, syntax: "vA, vB, vC" },
  InstType { mnemonic: "cmpg_double", get: &GetterOpAACCBB {}, syntax: "vA, vB, vC" },
  InstType { mnemonic: "cmp_long", get: &GetterOpAACCBB {}, syntax: "vA, vB, vC" },
  InstType { mnemonic: "if_eq", get: &Getter22t {}, syntax: "vA, vB, C" },
  InstType { mnemonic: "if_ne", get: &Getter22t {}, syntax: "vA, vB, C" },
  InstType { mnemonic: "if_lt", get: &Getter22t {}, syntax: "vA, vB, C" },
  InstType { mnemonic: "if_ge", get: &Getter22t {}, syntax: "vA, vB, C" },
  InstType { mnemonic: "if_gt", get: &Getter22t {}, syntax: "vA, vB, C" },
  InstType { mnemonic: "if_le", get: &Getter22t {}, syntax: "vA, vB, C" },
  InstType { mnemonic: "if_eqz", get: &Getter21t {}, syntax: "vA, B" },
  InstType { mnemonic: "if_nez", get: &Getter21t {}, syntax: "vA, B" },
  InstType { mnemonic: "if_ltz", get: &Getter21t {}, syntax: "vA, B" },
  InstType { mnemonic: "if_gez", get: &Getter21t {}, syntax: "vA, B" },
  InstType { mnemonic: "if_gtz", get: &Getter21t {}, syntax: "vA, B" },
  InstType { mnemonic: "if_lez", get: &Getter21t {}, syntax: "vA, B" },
  InstType { mnemonic: "UNUSED", get: &GetterOp00 {}, syntax: "" },
  InstType { mnemonic: "UNUSED", get: &GetterOp00 {}, syntax: "" },
  InstType { mnemonic: "UNUSED", get: &GetterOp00 {}, syntax: "" },
  InstType { mnemonic: "UNUSED", get: &GetterOp00 {}, syntax: "" },
  InstType { mnemonic: "UNUSED", get: &GetterOp00 {}, syntax: "" },
  InstType { mnemonic: "UNUSED", get: &GetterOp00 {}, syntax: "" },
  InstType { mnemonic: "aget", get: &GetterOpAACCBB {}, syntax: "vA, vB, vC" },
  InstType { mnemonic: "aget_wide", get: &GetterOpAACCBB {}, syntax: "vA, vB, vC" },
  InstType { mnemonic: "aget_object", get: &GetterOpAACCBB {}, syntax: "vA, vB, vC" },
  InstType { mnemonic: "aget_boolean", get: &GetterOpAACCBB {}, syntax: "vA, vB, vC" },
  InstType { mnemonic: "aget_byte", get: &GetterOpAACCBB {}, syntax: "vA, vB, vC" },
  InstType { mnemonic: "aget_char", get: &GetterOpAACCBB {}, syntax: "vA, vB, vC" },
  InstType { mnemonic: "aget_short", get: &GetterOpAACCBB {}, syntax: "vA, vB, vC" },
  InstType { mnemonic: "aput", get: &GetterOpAACCBB {}, syntax: "vA, vB, vC" },
  InstType { mnemonic: "aput_wide", get: &GetterOpAACCBB {}, syntax: "vA, vB, vC" },
  InstType { mnemonic: "aput_object", get: &GetterOpAACCBB {}, syntax: "vA, vB, vC" },
  InstType { mnemonic: "aput_boolean", get: &GetterOpAACCBB {}, syntax: "vA, vB, vC" },
  InstType { mnemonic: "aput_byte", get: &GetterOpAACCBB {}, syntax: "vA, vB, vC" },
  InstType { mnemonic: "aput_char", get: &GetterOpAACCBB {}, syntax: "vA, vB, vC" },
  InstType { mnemonic: "aput_short", get: &GetterOpAACCBB {}, syntax: "vA, vB, vC" },
  InstType { mnemonic: "iget", get: &GetterOpBACCCC {}, syntax: "vA, vB, field@C" },
  InstType { mnemonic: "iget_wide", get: &GetterOpBACCCC {}, syntax: "vA, vB, field@C" },
  InstType { mnemonic: "iget_object", get: &GetterOpBACCCC {}, syntax: "vA, vB, field@C" },
  InstType { mnemonic: "iget_boolean", get: &GetterOpBACCCC {}, syntax: "vA, vB, field@C" },
  InstType { mnemonic: "iget_byte", get: &GetterOpBACCCC {}, syntax: "vA, vB, field@C" },
  InstType { mnemonic: "iget_char", get: &GetterOpBACCCC {}, syntax: "vA, vB, field@C" },
  InstType { mnemonic: "iget_short", get: &GetterOpBACCCC {}, syntax: "vA, vB, field@C" },
  InstType { mnemonic: "iput", get: &GetterOpBACCCC {}, syntax: "vA, vB, field@C" },
  InstType { mnemonic: "iput_wide", get: &GetterOpBACCCC {}, syntax: "vA, vB, field@C" },
  InstType { mnemonic: "iput_object", get: &GetterOpBACCCC {}, syntax: "vA, vB, field@C" },
  InstType { mnemonic: "iput_boolean", get: &GetterOpBACCCC {}, syntax: "vA, vB, field@C" },
  InstType { mnemonic: "iput_byte", get: &GetterOpBACCCC {}, syntax: "vA, vB, field@C" },
  InstType { mnemonic: "iput_char", get: &GetterOpBACCCC {}, syntax: "vA, vB, field@C" },
  InstType { mnemonic: "iput_short", get: &GetterOpBACCCC {}, syntax: "vA, vB, field@C" },
  InstType { mnemonic: "sget", get: &GetterOpAABBBB {}, syntax: "vA, field@B" },
  InstType { mnemonic: "sget_wide", get: &GetterOpAABBBB {}, syntax: "vA, field@B" },
  InstType { mnemonic: "sget_object", get: &GetterOpAABBBB {}, syntax: "vA, field@B" },
  InstType { mnemonic: "sget_boolean", get: &GetterOpAABBBB {}, syntax: "vA, field@B" },
  InstType { mnemonic: "sget_byte", get: &GetterOpAABBBB {}, syntax: "vA, field@B" },
  InstType { mnemonic: "sget_char", get: &GetterOpAABBBB {}, syntax: "vA, field@B" },
  InstType { mnemonic: "sget_short", get: &GetterOpAABBBB {}, syntax: "vA, field@B" },
  InstType { mnemonic: "sput", get: &GetterOpAABBBB {}, syntax: "vA, field@B" },
  InstType { mnemonic: "sput_wide", get: &GetterOpAABBBB {}, syntax: "vA, field@B" },
  InstType { mnemonic: "sput_object", get: &GetterOpAABBBB {}, syntax: "vA, field@B" },
  InstType { mnemonic: "sput_boolean", get: &GetterOpAABBBB {}, syntax: "vA, field@B" },
  InstType { mnemonic: "sput_byte", get: &GetterOpAABBBB {}, syntax: "vA, field@B" },
  InstType { mnemonic: "sput_char", get: &GetterOpAABBBB {}, syntax: "vA, field@B" },
  InstType { mnemonic: "sput_short", get: &GetterOpAABBBB {}, syntax: "vA, field@B" },
  InstType { mnemonic: "invoke_virtual", get: &GetterOpAGBBBBDCFE {}, syntax: "{vC vD, vE, vF, vG}, meth@B" },
  InstType { mnemonic: "invoke_super", get: &GetterOpAGBBBBDCFE {}, syntax: "{vC vD, vE, vF, vG}, meth@B" },
  InstType { mnemonic: "invoke_direct", get: &GetterOpAGBBBBDCFE {}, syntax: "{vC vD, vE, vF, vG}, meth@B" },
  InstType { mnemonic: "invoke_static", get: &GetterOpAGBBBBDCFE {}, syntax: "{vC vD, vE, vF, vG}, meth@B" },
  InstType { mnemonic: "invoke_interface", get: &GetterOpAGBBBBDCFE {}, syntax: "{vC vD, vE, vF, vG}, meth@B" },
  InstType { mnemonic: "UNUSED", get: &GetterOp00 {}, syntax: "" },
  InstType { mnemonic: "invoke_virtual/range", get: &GetterOpAABBBBCCCC {}, syntax: "{vC .. vN}, meth@B" },
  InstType { mnemonic: "invoke_super/range", get: &GetterOpAABBBBCCCC {}, syntax: "{vC .. vN}, meth@B" },
  InstType { mnemonic: "invoke_direct/range", get: &GetterOpAABBBBCCCC {}, syntax: "{vC .. vN}, meth@B" },
  InstType { mnemonic: "invoke_static/range", get: &GetterOpAABBBBCCCC {}, syntax: "{vC .. vN}, meth@B" },
  InstType { mnemonic: "invoke_interface/range", get: &GetterOpAABBBBCCCC {}, syntax: "{vC .. vN}, meth@B" },
  InstType { mnemonic: "UNUSED", get: &GetterOp00 {}, syntax: "" },
  InstType { mnemonic: "UNUSED", get: &GetterOp00 {}, syntax: "" },
  InstType { mnemonic: "neg_int", get: &GetterOpBA {}, syntax: "vA, vB" },
  InstType { mnemonic: "not_int", get: &GetterOpBA {}, syntax: "vA, vB" },
  InstType { mnemonic: "neg_long", get: &GetterOpBA {}, syntax: "vA, vB" },
  InstType { mnemonic: "not_long", get: &GetterOpBA {}, syntax: "vA, vB" },
  InstType { mnemonic: "neg_float", get: &GetterOpBA {}, syntax: "vA, vB" },
  InstType { mnemonic: "neg_double", get: &GetterOpBA {}, syntax: "vA, vB" },
  InstType { mnemonic: "int_to_long", get: &GetterOpBA {}, syntax: "vA, vB" },
  InstType { mnemonic: "int_to_float", get: &GetterOpBA {}, syntax: "vA, vB" },
  InstType { mnemonic: "int_to_double", get: &GetterOpBA {}, syntax: "vA, vB" },
  InstType { mnemonic: "long_to_int", get: &GetterOpBA {}, syntax: "vA, vB" },
  InstType { mnemonic: "long_to_float", get: &GetterOpBA {}, syntax: "vA, vB" },
  InstType { mnemonic: "long_to_double", get: &GetterOpBA {}, syntax: "vA, vB" },
  InstType { mnemonic: "float_to_int", get: &GetterOpBA {}, syntax: "vA, vB" },
  InstType { mnemonic: "float_to_long", get: &GetterOpBA {}, syntax: "vA, vB" },
  InstType { mnemonic: "float_to_double", get: &GetterOpBA {}, syntax: "vA, vB" },
  InstType { mnemonic: "double_to_int", get: &GetterOpBA {}, syntax: "vA, vB" },
  InstType { mnemonic: "double_to_long", get: &GetterOpBA {}, syntax: "vA, vB" },
  InstType { mnemonic: "double_to_float", get: &GetterOpBA {}, syntax: "vA, vB" },
  InstType { mnemonic: "int_to_byte", get: &GetterOpBA {}, syntax: "vA, vB" },
  InstType { mnemonic: "int_to_char", get: &GetterOpBA {}, syntax: "vA, vB" },
  InstType { mnemonic: "int_to_short", get: &GetterOpBA {}, syntax: "vA, vB" },
  InstType { mnemonic: "add_int", get: &GetterOpAACCBB {}, syntax: "vA, vB, vC" },
  InstType { mnemonic: "sub_int", get: &GetterOpAACCBB {}, syntax: "vA, vB, vC" },
  InstType { mnemonic: "mul_int", get: &GetterOpAACCBB {}, syntax: "vA, vB, vC" },
  InstType { mnemonic: "div_int", get: &GetterOpAACCBB {}, syntax: "vA, vB, vC" },
  InstType { mnemonic: "rem_int", get: &GetterOpAACCBB {}, syntax: "vA, vB, vC" },
  InstType { mnemonic: "and_int", get: &GetterOpAACCBB {}, syntax: "vA, vB, vC" },
  InstType { mnemonic: "or_int", get: &GetterOpAACCBB {}, syntax: "vA, vB, vC" },
  InstType { mnemonic: "xor_int", get: &GetterOpAACCBB {}, syntax: "vA, vB, vC" },
  InstType { mnemonic: "shl_int", get: &GetterOpAACCBB {}, syntax: "vA, vB, vC" },
  InstType { mnemonic: "shr_int", get: &GetterOpAACCBB {}, syntax: "vA, vB, vC" },
  InstType { mnemonic: "ushr_int", get: &GetterOpAACCBB {}, syntax: "vA, vB, vC" },
  InstType { mnemonic: "add_long", get: &GetterOpAACCBB {}, syntax: "vA, vB, vC" },
  InstType { mnemonic: "sub_long", get: &GetterOpAACCBB {}, syntax: "vA, vB, vC" },
  InstType { mnemonic: "mul_long", get: &GetterOpAACCBB {}, syntax: "vA, vB, vC" },
  InstType { mnemonic: "div_long", get: &GetterOpAACCBB {}, syntax: "vA, vB, vC" },
  InstType { mnemonic: "rem_long", get: &GetterOpAACCBB {}, syntax: "vA, vB, vC" },
  InstType { mnemonic: "and_long", get: &GetterOpAACCBB {}, syntax: "vA, vB, vC" },
  InstType { mnemonic: "or_long", get: &GetterOpAACCBB {}, syntax: "vA, vB, vC" },
  InstType { mnemonic: "xor_long", get: &GetterOpAACCBB {}, syntax: "vA, vB, vC" },
  InstType { mnemonic: "shl_long", get: &GetterOpAACCBB {}, syntax: "vA, vB, vC" },
  InstType { mnemonic: "shr_long", get: &GetterOpAACCBB {}, syntax: "vA, vB, vC" },
  InstType { mnemonic: "ushr_long", get: &GetterOpAACCBB {}, syntax: "vA, vB, vC" },
  InstType { mnemonic: "add_float", get: &GetterOpAACCBB {}, syntax: "vA, vB, vC" },
  InstType { mnemonic: "sub_float", get: &GetterOpAACCBB {}, syntax: "vA, vB, vC" },
  InstType { mnemonic: "mul_float", get: &GetterOpAACCBB {}, syntax: "vA, vB, vC" },
  InstType { mnemonic: "div_float", get: &GetterOpAACCBB {}, syntax: "vA, vB, vC" },
  InstType { mnemonic: "rem_float", get: &GetterOpAACCBB {}, syntax: "vA, vB, vC" },
  InstType { mnemonic: "add_double", get: &GetterOpAACCBB {}, syntax: "vA, vB, vC" },
  InstType { mnemonic: "sub_double", get: &GetterOpAACCBB {}, syntax: "vA, vB, vC" },
  InstType { mnemonic: "mul_double", get: &GetterOpAACCBB {}, syntax: "vA, vB, vC" },
  InstType { mnemonic: "div_double", get: &GetterOpAACCBB {}, syntax: "vA, vB, vC" },
  InstType { mnemonic: "rem_double", get: &GetterOpAACCBB {}, syntax: "vA, vB, vC" },
  InstType { mnemonic: "add_int/2addr", get: &GetterOpBA {}, syntax: "vA, vB" },
  InstType { mnemonic: "sub_int/2addr", get: &GetterOpBA {}, syntax: "vA, vB" },
  InstType { mnemonic: "mul_int/2addr", get: &GetterOpBA {}, syntax: "vA, vB" },
  InstType { mnemonic: "div_int/2addr", get: &GetterOpBA {}, syntax: "vA, vB" },
  InstType { mnemonic: "rem_int/2addr", get: &GetterOpBA {}, syntax: "vA, vB" },
  InstType { mnemonic: "and_int/2addr", get: &GetterOpBA {}, syntax: "vA, vB" },
  InstType { mnemonic: "or_int/2addr", get: &GetterOpBA {}, syntax: "vA, vB" },
  InstType { mnemonic: "xor_int/2addr", get: &GetterOpBA {}, syntax: "vA, vB" },
  InstType { mnemonic: "shl_int/2addr", get: &GetterOpBA {}, syntax: "vA, vB" },
  InstType { mnemonic: "shr_int/2addr", get: &GetterOpBA {}, syntax: "vA, vB" },
  InstType { mnemonic: "ushr_int/2addr", get: &GetterOpBA {}, syntax: "vA, vB" },
  InstType { mnemonic: "add_long/2addr", get: &GetterOpBA {}, syntax: "vA, vB" },
  InstType { mnemonic: "sub_long/2addr", get: &GetterOpBA {}, syntax: "vA, vB" },
  InstType { mnemonic: "mul_long/2addr", get: &GetterOpBA {}, syntax: "vA, vB" },
  InstType { mnemonic: "div_long/2addr", get: &GetterOpBA {}, syntax: "vA, vB" },
  InstType { mnemonic: "rem_long/2addr", get: &GetterOpBA {}, syntax: "vA, vB" },
  InstType { mnemonic: "and_long/2addr", get: &GetterOpBA {}, syntax: "vA, vB" },
  InstType { mnemonic: "or_long/2addr", get: &GetterOpBA {}, syntax: "vA, vB" },
  InstType { mnemonic: "xor_long/2addr", get: &GetterOpBA {}, syntax: "vA, vB" },
  InstType { mnemonic: "shl_long/2addr", get: &GetterOpBA {}, syntax: "vA, vB" },
  InstType { mnemonic: "shr_long/2addr", get: &GetterOpBA {}, syntax: "vA, vB" },
  InstType { mnemonic: "ushr_long/2addr", get: &GetterOpBA {}, syntax: "vA, vB" },
  InstType { mnemonic: "add_float/2addr", get: &GetterOpBA {}, syntax: "vA, vB" },
  InstType { mnemonic: "sub_float/2addr", get: &GetterOpBA {}, syntax: "vA, vB" },
  InstType { mnemonic: "mul_float/2addr", get: &GetterOpBA {}, syntax: "vA, vB" },
  InstType { mnemonic: "div_float/2addr", get: &GetterOpBA {}, syntax: "vA, vB" },
  InstType { mnemonic: "rem_float/2addr", get: &GetterOpBA {}, syntax: "vA, vB" },
  InstType { mnemonic: "add_double/2addr", get: &GetterOpBA {}, syntax: "vA, vB" },
  InstType { mnemonic: "sub_double/2addr", get: &GetterOpBA {}, syntax: "vA, vB" },
  InstType { mnemonic: "mul_double/2addr", get: &GetterOpBA {}, syntax: "vA, vB" },
  InstType { mnemonic: "div_double/2addr", get: &GetterOpBA {}, syntax: "vA, vB" },
  InstType { mnemonic: "rem_double/2addr", get: &GetterOpBA {}, syntax: "vA, vB" },
  InstType { mnemonic: "add_int/lit16", get: &GetterOpBACCCC {}, syntax: "vA, vB, #+C" },
  InstType { mnemonic: "rsub_int", get: &GetterOpBACCCC {}, syntax: "vA, vB, #+C" },
  InstType { mnemonic: "mul_int/lit16", get: &GetterOpBACCCC {}, syntax: "vA, vB, #+C" },
  InstType { mnemonic: "div_int/lit16", get: &GetterOpBACCCC {}, syntax: "vA, vB, #+C" },
  InstType { mnemonic: "rem_int/lit16", get: &GetterOpBACCCC {}, syntax: "vA, vB, #+C" },
  InstType { mnemonic: "and_int/lit16", get: &GetterOpBACCCC {}, syntax: "vA, vB, #+C" },
  InstType { mnemonic: "or_int/lit16", get: &GetterOpBACCCC {}, syntax: "vA, vB, #+C" },
  InstType { mnemonic: "xor_int/lit16", get: &GetterOpBACCCC {}, syntax: "vA, vB, #+C" },
  InstType { mnemonic: "add_int/lit8", get: &GetterOpAACCBB {}, syntax: "vA, vB, #+C" },
  InstType { mnemonic: "rsub_int/lit8", get: &GetterOpAACCBB {}, syntax: "vA, vB, #+C" },
  InstType { mnemonic: "mul_int/lit8", get: &GetterOpAACCBB {}, syntax: "vA, vB, #+C" },
  InstType { mnemonic: "div_int/lit8", get: &GetterOpAACCBB {}, syntax: "vA, vB, #+C" },
  InstType { mnemonic: "rem_int/lit8", get: &GetterOpAACCBB {}, syntax: "vA, vB, #+C" },
  InstType { mnemonic: "and_int/lit8", get: &GetterOpAACCBB {}, syntax: "vA, vB, #+C" },
  InstType { mnemonic: "or_int/lit8", get: &GetterOpAACCBB {}, syntax: "vA, vB, #+C" },
  InstType { mnemonic: "xor_int/lit8", get: &GetterOpAACCBB {}, syntax: "vA, vB, #+C" },
  InstType { mnemonic: "shl_int/lit8", get: &GetterOpAACCBB {}, syntax: "vA, vB, #+C" },
  InstType { mnemonic: "shr_int/lit8", get: &GetterOpAACCBB {}, syntax: "vA, vB, #+C" },
  InstType { mnemonic: "ushr_int/lit8", get: &GetterOpAACCBB {}, syntax: "vA, vB, #+C" },
  InstType { mnemonic: "UNUSED", get: &GetterOp00 {}, syntax: "" },
  InstType { mnemonic: "UNUSED", get: &GetterOp00 {}, syntax: "" },
  InstType { mnemonic: "UNUSED", get: &GetterOp00 {}, syntax: "" },
  InstType { mnemonic: "UNUSED", get: &GetterOp00 {}, syntax: "" },
  InstType { mnemonic: "UNUSED", get: &GetterOp00 {}, syntax: "" },
  InstType { mnemonic: "UNUSED", get: &GetterOp00 {}, syntax: "" },
  InstType { mnemonic: "UNUSED", get: &GetterOp00 {}, syntax: "" },
  InstType { mnemonic: "UNUSED", get: &GetterOp00 {}, syntax: "" },
  InstType { mnemonic: "UNUSED", get: &GetterOp00 {}, syntax: "" },
  InstType { mnemonic: "UNUSED", get: &GetterOp00 {}, syntax: "" },
  InstType { mnemonic: "UNUSED", get: &GetterOp00 {}, syntax: "" },
  InstType { mnemonic: "UNUSED", get: &GetterOp00 {}, syntax: "" },
  InstType { mnemonic: "UNUSED", get: &GetterOp00 {}, syntax: "" },
  InstType { mnemonic: "UNUSED", get: &GetterOp00 {}, syntax: "" },
  InstType { mnemonic: "UNUSED", get: &GetterOp00 {}, syntax: "" },
  InstType { mnemonic: "UNUSED", get: &GetterOp00 {}, syntax: "" },
  InstType { mnemonic: "UNUSED", get: &GetterOp00 {}, syntax: "" },
  InstType { mnemonic: "UNUSED", get: &GetterOp00 {}, syntax: "" },
  InstType { mnemonic: "UNUSED", get: &GetterOp00 {}, syntax: "" },
  InstType { mnemonic: "UNUSED", get: &GetterOp00 {}, syntax: "" },
  InstType { mnemonic: "UNUSED", get: &GetterOp00 {}, syntax: "" },
  InstType { mnemonic: "UNUSED", get: &GetterOp00 {}, syntax: "" },
  InstType { mnemonic: "UNUSED", get: &GetterOp00 {}, syntax: "" },
  InstType { mnemonic: "invoke_polymorphic", get: &GetterOpAGBBBBDCFEHHHH {}, syntax: "{vC, vD, vE, vF, vG}, meth@B, proto@H" },
  InstType { mnemonic: "invoke_polymorphic/range", get: &GetterOpAABBBBCCCCHHHH {}, syntax: "{vC .. vN}, meth@B, proto@H" },
  InstType { mnemonic: "invoke_custom", get: &GetterOpAGBBBBDCFE {}, syntax: "{vC, vD, vE, vF, vG}, call_site@B" },
  InstType { mnemonic: "invoke_custom/range", get: &GetterOpAABBBBCCCC {}, syntax: "{vC .. vN}, call_site@B" },
  InstType { mnemonic: "const_method_handle", get: &GetterOpAABBBB {}, syntax: "vA, method_handle@B" },
  InstType { mnemonic: "const_method_type", get: &GetterOpAABBBB {}, syntax: "vA, proto@B" },
]
